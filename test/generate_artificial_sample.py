import numpy as np
import matplotlib.pyplot as plt
import textwrap


def dipole_Bz(dip_r, dip_m, pos_r, Bz_grid, Sx_range, Sy_range):
    """
    Compute the z-component of the dipole field at the pos_r position(s), from
    a group of particles located at the dip_r dipole_positions, and which have
    magnetic dipole moments given in the dip_m array.

    For these arrays, N > 1

    dip_r   :: N x 3 array with dipole positions (m)
    dip_m   :: N x 3 array with dipole moments (Am^2)
    pos_r   :: 1 x 3 array with coordinates of measurement point (m)

    Returns

    N x 3 array  :: Rows are Bz generated by each particle
    """
    # For every row of dip_r (Nx3 array), subtract pos_r (1x3 array)
    for j, sy in enumerate(Sy_range):
        for i, sx in enumerate(Sx_range):
            r = pos_r[j, i] - dip_r
            x, y, z = r[:, 0], r[:, 1], r[:, 2]

            rho2 = np.sum(r ** 2, axis=1)
            rho = np.sqrt(rho2)

            sp = dip_m[:, 0] * x + dip_m[:, 1] * y + dip_m[:, 2] * z
            f = 3e-7 * sp / (rho2 * rho2 * rho)
            g = -1e-7 / (rho2 * rho)

            # Only return Bz
            res = f * z + g * dip_m[:, 2]

            Bz_grid[j, i] += np.sum(res)

    return None


Lx, Ly = 40.0, 40.0
res = 21
X, Y = np.linspace(0, Lx, res) * 1e-6, np.linspace(0, Ly, res) * 1e-6
scan_grid_X, scan_grid_Y = np.meshgrid(X, Y)
# scan_grid_coords = np.column_stack((scan_grid_X.flatten(),
#                                     scan_grid_Y.flatten()))
scan_height = 2e-6
scan_grid_coords = np.stack((scan_grid_X,
                             scan_grid_Y,
                             np.ones_like(scan_grid_X) * scan_height
                             ), axis=2)

Bz_grid = np.zeros((res, res))

# dipole_pos = np.array([[9., 10., -5.],
#                        [9., 10., -6]]
#                       ) * 1e-6
dipole_depth = 10
dipole_pos = np.array([[Lx * 0.5, Ly * 0.5, -dipole_depth]]) * 1e-6
Ms = 4.8e5
# vols = np.array([1 * 1 * 1, 1 * 3 * 1.]) * 1e-18
# dipole_mus = Ms * vols[:, np.newaxis] * np.array([[1., 0., 0.], [1., 0., 0.]])
vols = np.array([1 * 1 * 1.]) * 1e-18
dipole_mus = Ms * vols[:, np.newaxis] * np.array([[0., 1., 0.]])
dipole_Bz(dipole_pos, dipole_mus, scan_grid_coords, Bz_grid,
          X, Y)
np.savetxt('artificial_sample_Bzgrid.txt', Bz_grid, fmt='%.18e')

# f, ax = plt.subplots()
# ax.imshow(Bz_grid, cmap='RdBu_r', origin='lower')
# plt.show()

# Create content for cuboid file: x y z 2a 2b 2c index
# Index grain with index = 4
# cuboid_file = textwrap.dedent(
#     """
#     9.0 10.0 -5.0 1.0 1.0 1.0 4
#     9.0 10.0 -6.0 1.0 3.0 1.0 4
#     """
#     )
cuboid_file = textwrap.dedent(
    f"""
    {Lx * 0.5:.1f} {Ly * 0.5:.1f} {dipole_depth:.1f} 1.0 1.0 1.0 4
    """
    )

with open('artificial_sample_cuboids.txt', 'w') as cf:
    cf.write(cuboid_file)
